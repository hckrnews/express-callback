{"version":3,"file":"express-callback.js","sources":["../src/error-status.js","../src/status-codes.js","../src/response.js","../src/express-callback.js"],"sourcesContent":["const errorCodesStatus = [\n    {\n        type: TypeError,\n        status: 422,\n    },\n    {\n        type: RangeError,\n        status: 404,\n    },\n    {\n        type: Error,\n        status: 500,\n    },\n];\n\n/**\n * Get a http status when you send an error.\n * When it is a error, throw back the error.\n *\n * @param {Error} error\n *\n * @return {number}\n */\nexport default (error) =>\n    errorCodesStatus.find((errorCode) => error instanceof errorCode.type)\n        .status;\n","import http from 'http';\n\nexport const statusCodes = Object.keys(http.STATUS_CODES).map(Number);\n\nexport function isValid(statusCode) {\n    return statusCodes.includes(statusCode);\n}\n","import { isValid as isValidStatusCode, statusCodes } from './status-codes';\n\n/**\n * Build a valid reponse message.\n *\n * @param {number} statusCode\n * @param {object|array} body\n *\n * @return {object}\n */\nexport default function buildJsonResponse({ statusCode, body }) {\n    if (\n        statusCode?.constructor.name !== 'Number' ||\n        !isValidStatusCode(statusCode)\n    ) {\n        throw new Error('statusCode must have a valid http status code');\n    }\n\n    if (\n        body?.constructor.name !== 'Object' &&\n        body?.constructor.name !== 'Array'\n    ) {\n        throw new Error('body must have a valid object');\n    }\n\n    return {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        statusCode,\n        body,\n    };\n}\n\nexport { buildJsonResponse, statusCodes, isValidStatusCode };\n","import getStatusByError from './error-status';\nimport { buildJsonResponse, statusCodes, isValidStatusCode } from './response';\n\nexport default function makeExpressCallback({\n    controller,\n    specification,\n    logger,\n    meta,\n}) {\n    return async (context, req, res) => {\n        try {\n            const response = await controller({\n                context,\n                specification,\n                logger,\n                req,\n                res,\n                meta,\n            });\n            const httpResponse = buildJsonResponse(response);\n\n            if (httpResponse.headers) {\n                res.set(httpResponse.headers);\n            }\n\n            res.type('json');\n            res.status(httpResponse.statusCode).send(httpResponse.body);\n        } catch (error) {\n            const errorCodeStatus = getStatusByError(error);\n\n            if (errorCodeStatus >= 500) {\n                logger.error(error.message);\n            }\n\n            res.status(errorCodeStatus).send({\n                status: errorCodeStatus,\n                timestamp: new Date(),\n                message: error.message,\n            });\n        }\n    };\n}\n\nexport {\n    makeExpressCallback,\n    getStatusByError,\n    buildJsonResponse,\n    statusCodes,\n    isValidStatusCode,\n};\n"],"names":["errorCodesStatus","type","TypeError","status","RangeError","Error","error","find","errorCode","statusCodes","Object","keys","http","STATUS_CODES","map","Number","isValid","statusCode","includes","buildJsonResponse","body","constructor","name","isValidStatusCode","headers","makeExpressCallback","controller","specification","logger","meta","context","req","res","response","httpResponse","set","send","errorCodeStatus","getStatusByError","message","timestamp","Date"],"mappings":"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"}